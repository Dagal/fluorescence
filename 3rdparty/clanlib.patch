Index: Sources/GUI/gui_component.cpp
===================================================================
--- Sources/GUI/gui_component.cpp
+++ Sources/GUI/gui_component.cpp
@@ -602,6 +602,23 @@
 	return impl->constant_repaint;
 }
 
+bool CL_GUIComponent::stay_in_background() const
+{
+	return impl->stay_in_background;
+}
+
+CL_Font CL_GUIComponent::get_font_override() const
+{
+	static CL_Font ret;
+	return ret;
+}
+
+CL_StringRef CL_GUIComponent::get_css_override(const CL_GUIThemePart& part, const CL_String& name) const 
+{
+	static CL_StringRef ret;
+	return ret;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_GUIComponent Events:
 
@@ -1377,6 +1394,11 @@
 	impl->css_layout.layout(gc, get_size());
 }
 
+void CL_GUIComponent::set_stay_in_background(bool value)
+{
+	impl->stay_in_background = value;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_GUIComponent Implementation:
 
Index: Sources/GUI/Theme/gui_theme_part_impl.h
===================================================================
--- Sources/GUI/Theme/gui_theme_part_impl.h
+++ Sources/GUI/Theme/gui_theme_part_impl.h
@@ -152,6 +152,11 @@
 
 inline CL_StringRef CL_GUIThemePart_Impl::get_property(const CL_GUIThemePart &part, const CL_String &name, const CL_String8 &hash, const CL_String &default_value) const
 {
+    CL_StringRef overrideValue = component->get_css_override(part, name);
+    if (overrideValue.data()) {
+        return overrideValue;
+    }
+    
 	CL_StringRef css_value = get_css_value(name, hash, default_value);
 
 	// Check if theme wants to override the property:
Index: Sources/GUI/Theme/gui_theme_part.cpp
===================================================================
--- Sources/GUI/Theme/gui_theme_part.cpp
+++ Sources/GUI/Theme/gui_theme_part.cpp
@@ -191,6 +191,11 @@
 
 CL_Font CL_GUIThemePart::get_font() const
 {
+    CL_Font fontOverride = impl->component->get_font_override();
+    if (!fontOverride.is_null()) {
+        return fontOverride;
+    }
+    
 	CL_GUIFontCache &font_cache = impl->component->get_gui_manager().impl->font_cache;
 	CL_Font font = font_cache.get_font(get_element_name(), impl->states);
 	if (!font.is_null())
Index: Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp
===================================================================
--- Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp
+++ Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp
@@ -245,7 +245,7 @@
 	CL_GUITopLevelWindow *toplevel_window;
 	toplevel_window = get_window_at_point(new_input_event.mouse_pos);
 
-	if (toplevel_window)
+	if (toplevel_window && !toplevel_window->component->stay_in_background())
 		bring_to_front(toplevel_window);
 
 	// Send focus lost events
Index: Sources/GUI/gui_component_impl.cpp
===================================================================
--- Sources/GUI/gui_component_impl.cpp
+++ Sources/GUI/gui_component_impl.cpp
@@ -42,6 +42,7 @@
   focus_policy(CL_GUIComponent::focus_refuse), allow_resize(false), clip_children(false), enabled(true),
   visible(true), activated(false), default_handler(false), cancel_handler(false),
   constant_repaint(false), blocks_default_action_when_focused(false), is_selected_in_group(false), double_click_enabled(true)
+  , stay_in_background(false)
 {
 	gui_manager_impl = gui_manager.lock().get();
 
Index: Sources/GUI/gui_component_impl.h
===================================================================
--- Sources/GUI/gui_component_impl.h
+++ Sources/GUI/gui_component_impl.h
@@ -115,6 +115,8 @@
 	CL_CSSLayoutElement css_element;
 	bool double_click_enabled;
 
+	bool stay_in_background;
+
 /// \}
 /// \name Operations
 /// \{
Index: Sources/API/GUI/gui_component.h
===================================================================
--- Sources/API/GUI/gui_component.h
+++ Sources/API/GUI/gui_component.h
@@ -62,6 +62,7 @@
 class CL_CSSLayout;
 class CL_CSSLayoutElement;
 class CL_GUIComponent_Impl;
+class CL_GUIThemePart;
 
 typedef CL_DisplayWindowDescription CL_GUITopLevelDescription;
 
@@ -318,6 +319,12 @@
 	/// \brief Gets the css element for this component
 	CL_CSSLayoutElement get_css_element();
 
+	bool stay_in_background() const;
+
+	virtual CL_Font get_font_override() const;
+
+	virtual CL_StringRef get_css_override(const CL_GUIThemePart& part, const CL_String& name) const;
+
 /// \}
 /// \name Events
 /// \{
@@ -544,6 +551,8 @@
 	/// \brief Loads a layout from file.
 	void load_css_layout(const CL_String &xml_filename, const CL_String &css_filename);
 
+	void set_stay_in_background(bool value);
+
 /// \}
 /// \name Implementation
 /// \{

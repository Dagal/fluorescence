Index: Sources/GUI/gui_manager_impl.cpp
===================================================================
--- Sources/GUI/gui_manager_impl.cpp	(revision 7504)
+++ Sources/GUI/gui_manager_impl.cpp	(working copy)
@@ -62,6 +62,7 @@
 	func_close.set(this, &CL_GUIManager_Impl::on_close);
 	func_destroy.set(this, &CL_GUIManager_Impl::on_destroy);
 	func_input_received.set(this, &CL_GUIManager_Impl::on_input_received);
+	func_input_received_nowindow.set(this, &CL_GUIManager_Impl::on_input_received_nowindow);
 
 	wm_site.func_focus_lost = &func_focus_lost;
 	wm_site.func_focus_gained = &func_focus_gained;
@@ -70,6 +71,7 @@
 	wm_site.func_close = &func_close;
 	wm_site.func_destroy = &func_destroy;
 	wm_site.func_input_received = &func_input_received;
+	wm_site.func_input_received_nowindow = &func_input_received_nowindow;
 }
 
 CL_GUIManager_Impl::~CL_GUIManager_Impl()
@@ -767,9 +769,33 @@
 		if (!message.is_consumed())
 			process_standard_gui_keys(message);
 	}
+	else if (!func_input_received_nowindow_user.is_null())
+	{
+		func_input_received_nowindow_user.invoke(input_event, input_state);
+	}
 
 }
 
+void CL_GUIManager_Impl::on_input_received_nowindow(
+	const CL_InputEvent &input_event,
+	const CL_InputState &input_state)
+{
+	if (input_event.type == CL_InputEvent::pointer_moved &&
+		mouse_over_component)
+	{
+		CL_GUIMessage_Pointer msg;
+		msg.set_pointer_type(CL_GUIMessage_Pointer::pointer_leave);
+		msg.set_target(mouse_over_component);
+		dispatch_message(msg);
+		
+		mouse_over_component = 0;
+	}
+	
+	if (!func_input_received_nowindow_user.is_null()) {
+		func_input_received_nowindow_user.invoke(input_event, input_state);
+	}
+}
+
 CL_GUIComponent *CL_GUIManager_Impl::get_cancel_component(CL_GUIComponent *comp)
 {
 	if (comp && comp->is_cancel())
Index: Sources/GUI/gui_manager_impl.h
===================================================================
--- Sources/GUI/gui_manager_impl.h	(revision 7504)
+++ Sources/GUI/gui_manager_impl.h	(working copy)
@@ -139,6 +139,8 @@
 	CL_Callback_v1<CL_GUITopLevelWindow *> func_close;
 	CL_Callback_v1<CL_GUITopLevelWindow *> func_destroy;
 	CL_Callback_v3<CL_GUITopLevelWindow *, const CL_InputEvent &, const CL_InputState &> func_input_received;
+	CL_Callback_v2<const CL_InputEvent &, const CL_InputState &> func_input_received_nowindow; // internal function
+	CL_Callback_v2<const CL_InputEvent &, const CL_InputState &> func_input_received_nowindow_user; // callback the user can set
 	CL_GUIFontCache font_cache;
 
 /// \}
@@ -176,6 +178,7 @@
 	void on_close(CL_GUITopLevelWindow *toplevel_window);
 	void on_destroy(CL_GUITopLevelWindow *toplevel_window);
 	void on_input_received(CL_GUITopLevelWindow *toplevel_window, const CL_InputEvent &input_event, const CL_InputState &input_state);
+	void on_input_received_nowindow(const CL_InputEvent &input_event, const CL_InputState &input_state);
 	void on_gc_destruction_imminent();
 	mutable std::map< CL_String, std::vector<CL_CSSProperty> > properties_cache;
 
Index: Sources/GUI/gui_component.cpp
===================================================================
--- Sources/GUI/gui_component.cpp	(revision 7504)
+++ Sources/GUI/gui_component.cpp	(working copy)
@@ -86,6 +86,7 @@
 	impl->component = this;
 	impl->allow_resize = description.get_allow_resize();
 	impl->visible = description.is_visible();
+	impl->stay_in_background = description.is_in_background();
 	impl->gui_manager.lock()->add_component(this, 0, description);
 	impl->type_name = "component";
 	impl->geometry = impl->gui_manager.lock()->window_manager.get_geometry(impl->gui_manager.lock()->get_toplevel_window(this), true);
@@ -98,6 +99,7 @@
 	impl->component = this;
 	impl->allow_resize = description.get_allow_resize();
 	impl->visible = description.is_visible();
+	impl->stay_in_background = description.is_in_background();
 	impl->gui_manager.lock()->add_component(this, owner, description);
 	impl->type_name = "component";
 	impl->geometry = impl->gui_manager.lock()->window_manager.get_geometry(impl->gui_manager.lock()->get_toplevel_window(this), true);
@@ -602,6 +604,23 @@
 	return impl->constant_repaint;
 }
 
+CL_Font CL_GUIComponent::get_font_override() const
+{
+	static CL_Font ret;
+	return ret;
+}
+
+CL_StringRef CL_GUIComponent::get_css_override(const CL_GUIThemePart& part, const CL_String& name) const 
+{
+	static CL_StringRef ret;
+	return ret;
+}
+
+bool CL_GUIComponent::get_stay_in_background() const
+{
+	return impl->stay_in_background;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_GUIComponent Events:
 
@@ -1262,9 +1281,9 @@
 	// No parent, must be top-level component. Find last child.
 	CL_GUIComponent *last = impl->last_child;
 
-    // No child, must be a lonely top-level component.
-    if(last == 0)
-        return this;
+	// No child, must be a lonely top-level component.
+	if(last == 0)
+		return this;
 
 	while (last->has_child_components())
 	{
@@ -1377,6 +1396,11 @@
 	impl->css_layout.layout(gc, get_size());
 }
 
+void CL_GUIComponent::set_stay_in_background(bool value)
+{
+	impl->stay_in_background = value;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_GUIComponent Implementation:
 
Index: Sources/GUI/gui_manager.cpp
===================================================================
--- Sources/GUI/gui_manager.cpp	(revision 7504)
+++ Sources/GUI/gui_manager.cpp	(working copy)
@@ -165,6 +165,11 @@
 	return impl->func_exec_handler;
 }
 
+CL_Callback_v2<const CL_InputEvent &, const CL_InputState &> &CL_GUIManager::func_input_received_nowindow()
+{
+	return impl->func_input_received_nowindow_user;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_GUIManager Operations:
 
Index: Sources/GUI/Theme/gui_theme_part_impl.h
===================================================================
--- Sources/GUI/Theme/gui_theme_part_impl.h	(revision 7504)
+++ Sources/GUI/Theme/gui_theme_part_impl.h	(working copy)
@@ -152,6 +152,11 @@
 
 inline CL_StringRef CL_GUIThemePart_Impl::get_property(const CL_GUIThemePart &part, const CL_String &name, const CL_String8 &hash, const CL_String &default_value) const
 {
+	CL_StringRef overrideValue = component->get_css_override(part, name);
+	if (overrideValue.data()) {
+		return overrideValue;
+	}
+	
 	CL_StringRef css_value = get_css_value(name, hash, default_value);
 
 	// Check if theme wants to override the property:
Index: Sources/GUI/Theme/gui_theme_part.cpp
===================================================================
--- Sources/GUI/Theme/gui_theme_part.cpp	(revision 7504)
+++ Sources/GUI/Theme/gui_theme_part.cpp	(working copy)
@@ -191,6 +191,11 @@
 
 CL_Font CL_GUIThemePart::get_font() const
 {
+	CL_Font fontOverride = impl->component->get_font_override();
+	if (!fontOverride.is_null()) {
+		return fontOverride;
+	}
+	
 	CL_GUIFontCache &font_cache = impl->component->get_gui_manager().impl->font_cache;
 	CL_Font font = font_cache.get_font(get_element_name(), impl->states);
 	if (!font.is_null())
Index: Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp
===================================================================
--- Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp	(revision 7504)
+++ Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp	(working copy)
@@ -154,7 +154,7 @@
 
 void CL_GUIWindowManagerProvider_Texture::on_input(const CL_InputEvent &input_event, const CL_InputState &input_state)
 {
-	if (activated_window == 0)
+	if (activated_window == 0 && site->func_input_received_nowindow->is_null())
 		return;
 
 	CL_InputEvent new_input_event = input_event;
@@ -163,7 +163,15 @@
 	if (!func_input_intercept.is_null())
 		func_input_intercept.invoke(new_input_event, new_input_state);
 
-	invoke_input_received(activated_window, new_input_event, new_input_state);
+	if (activated_window) 
+	{
+		invoke_input_received(activated_window, new_input_event, new_input_state);
+	}
+	else if (!site->func_input_received_nowindow->is_null())
+	{
+		site->func_input_received_nowindow->invoke(new_input_event, new_input_state);
+	}
+
 }
 
 void CL_GUIWindowManagerProvider_Texture::on_input_mouse_move(const CL_InputEvent &input_event, const CL_InputState &input_state)
@@ -204,8 +212,12 @@
 		toplevel_window = get_window_at_point(new_input_event.mouse_pos);
 	}
 
-	if (toplevel_window)
+	if (toplevel_window) 
 		invoke_input_received(toplevel_window, new_input_event, new_input_state);
+	else if (!site->func_input_received_nowindow->is_null())
+	{
+		site->func_input_received_nowindow->invoke(new_input_event, new_input_state);
+	}
 }
 
 void CL_GUIWindowManagerProvider_Texture::on_input_mouse_up(const CL_InputEvent &input_event, const CL_InputState &input_state)
@@ -245,7 +257,7 @@
 	CL_GUITopLevelWindow *toplevel_window;
 	toplevel_window = get_window_at_point(new_input_event.mouse_pos);
 
-	if (toplevel_window)
+	if (toplevel_window && !toplevel_window->component->get_stay_in_background())
 		bring_to_front(toplevel_window);
 
 	// Send focus lost events
@@ -285,6 +297,10 @@
 	if (toplevel_window)
 	{
 		invoke_input_received(toplevel_window, new_input_event, new_input_state);
+	} 
+	else if (site->func_input_received_nowindow->is_null())
+	{
+		site->func_input_received_nowindow->invoke(new_input_event, new_input_state);
 	}
 
 }
@@ -433,7 +449,10 @@
 	else
 	{
 		// Attach to root
-		root_window_z_order.insert(root_window_z_order.begin(), toplevel_window);
+		if (description.is_in_background())
+			root_window_z_order.insert(root_window_z_order.end(), toplevel_window);
+		else
+			root_window_z_order.insert(root_window_z_order.begin(), toplevel_window);
 	}
 
 	activated_window = handle;
Index: Sources/GUI/gui_component_impl.cpp
===================================================================
--- Sources/GUI/gui_component_impl.cpp	(revision 7504)
+++ Sources/GUI/gui_component_impl.cpp	(working copy)
@@ -42,6 +42,7 @@
   focus_policy(CL_GUIComponent::focus_refuse), allow_resize(false), clip_children(false), enabled(true),
   visible(true), activated(false), default_handler(false), cancel_handler(false),
   constant_repaint(false), blocks_default_action_when_focused(false), is_selected_in_group(false), double_click_enabled(true)
+  , stay_in_background(false)
 {
 	gui_manager_impl = gui_manager.lock().get();
 
@@ -159,7 +160,7 @@
 {
 	try
 	{
-        CL_ResourceManager resources = gui_manager.lock()->theme.get_resources();
+		CL_ResourceManager resources = gui_manager.lock()->theme.get_resources();
 		return CL_Image(gc, url, &resources);
 	}
 	catch (CL_Exception e)
Index: Sources/GUI/gui_component_impl.h
===================================================================
--- Sources/GUI/gui_component_impl.h	(revision 7504)
+++ Sources/GUI/gui_component_impl.h	(working copy)
@@ -115,6 +115,8 @@
 	CL_CSSLayoutElement css_element;
 	bool double_click_enabled;
 
+	bool stay_in_background;
+
 /// \}
 /// \name Operations
 /// \{
Index: Sources/Display/Window/display_window_description.cpp
===================================================================
--- Sources/Display/Window/display_window_description.cpp	(revision 7504)
+++ Sources/Display/Window/display_window_description.cpp	(working copy)
@@ -192,6 +192,11 @@
 	return impl->topmost;
 }
 
+bool CL_DisplayWindowDescription::is_in_background() const 
+{
+	return impl->in_background;
+}
+
 bool CL_DisplayWindowDescription::is_visible() const
 {
 	return impl->visible;
@@ -281,6 +286,11 @@
 	impl->topmost = value;
 }
 
+void CL_DisplayWindowDescription::set_in_background(bool value)
+{
+	impl->in_background = value;
+}
+
 void CL_DisplayWindowDescription::set_visible(bool value)
 {
 	impl->visible = value;
Index: Sources/Display/Window/display_window_description_impl.h
===================================================================
--- Sources/Display/Window/display_window_description_impl.h	(revision 7504)
+++ Sources/Display/Window/display_window_description_impl.h	(working copy)
@@ -48,6 +48,7 @@
 		decorations = true;
 		caption = true;
 		topmost = false;
+		in_background = false;
 		visible = true;
 		minimize_button = true;
 		maximize_button = true;
@@ -89,6 +90,7 @@
 	bool sysmenu;
 	bool border;
 	bool topmost;
+	bool in_background;
 	bool visible;
 	bool drop_shadow;
 	bool tool_window;
Index: Sources/API/GUI/gui_window_manager.h
===================================================================
--- Sources/API/GUI/gui_window_manager.h	(revision 7504)
+++ Sources/API/GUI/gui_window_manager.h	(working copy)
@@ -76,8 +76,11 @@
 	/// \brief Pointer to destroy notification callback function.
 	CL_Callback_v1<CL_GUITopLevelWindow *> *func_destroy;
 
-	/// \brief Pointer to close notification callback function.
+	/// \brief Pointer to input received callback function.
 	CL_Callback_v3<CL_GUITopLevelWindow *, const CL_InputEvent &, const CL_InputState &> *func_input_received;
+	
+	/// \brief Pointer to windowless input received callback function
+	CL_Callback_v2<const CL_InputEvent &, const CL_InputState &> *func_input_received_nowindow;
 /// \}
 };
 
Index: Sources/API/GUI/gui_component.h
===================================================================
--- Sources/API/GUI/gui_component.h	(revision 7504)
+++ Sources/API/GUI/gui_component.h	(working copy)
@@ -62,6 +62,7 @@
 class CL_CSSLayout;
 class CL_CSSLayoutElement;
 class CL_GUIComponent_Impl;
+class CL_GUIThemePart;
 
 typedef CL_DisplayWindowDescription CL_GUITopLevelDescription;
 
@@ -318,6 +319,12 @@
 	/// \brief Gets the css element for this component
 	CL_CSSLayoutElement get_css_element();
 
+	virtual CL_Font get_font_override() const;
+
+	virtual CL_StringRef get_css_override(const CL_GUIThemePart& part, const CL_String& name) const;
+
+	bool get_stay_in_background() const;
+
 /// \}
 /// \name Events
 /// \{
@@ -544,6 +551,8 @@
 	/// \brief Loads a layout from file.
 	void load_css_layout(const CL_String &xml_filename, const CL_String &css_filename);
 
+	void set_stay_in_background(bool value);
+
 /// \}
 /// \name Implementation
 /// \{
Index: Sources/API/GUI/gui_manager.h
===================================================================
--- Sources/API/GUI/gui_manager.h	(revision 7504)
+++ Sources/API/GUI/gui_manager.h	(working copy)
@@ -39,6 +39,7 @@
 #include "../Core/Signals/callback_0.h"
 #include "../Core/Signals/callback_1.h"
 #include "../Core/Signals/callback_2.h"
+#include "../Core/Signals/callback_v2.h"
 #include "../Core/Signals/signal_v1.h"
 #include "../Core/Math/point.h"
 #include "accelerator_table.h"
@@ -57,6 +58,8 @@
 class CL_VirtualDirectory;
 class CL_DisplayWindow;
 class CL_ResourceManager;
+class CL_InputEvent;
+class CL_InputState;
 
 /// \brief GUI manager.
 ///
@@ -147,6 +150,9 @@
 
 	/// \brief int func_exec_handler()
 	CL_Callback_0<int> &func_exec_handler();
+	
+	/// \brief callback for (mouse) input events happening outside the gui components
+	CL_Callback_v2<const CL_InputEvent &, const CL_InputState &> &func_input_received_nowindow();
 
 /// \}
 /// \name Operations
Index: Sources/API/Display/Window/display_window_description.h
===================================================================
--- Sources/API/Display/Window/display_window_description.h	(revision 7504)
+++ Sources/API/Display/Window/display_window_description.h	(working copy)
@@ -155,6 +155,9 @@
 	/// \brief Returns true if the window should be placed above all non-topmost windows.
 	bool is_topmost() const;
 
+	/// \brief Returns true if the window should stay behind other windows, even when focused (GUI only)
+	bool is_in_background() const;
+
 	/// \brief Returns true if window from the window cache should be used. (GUI Only)
 	/** <p>This setting is ignored unless the GUI and CL_GUIWindowManagerSystem are used.</p> */
 	bool get_using_gui_window_cache() const;
@@ -213,6 +216,9 @@
 	/// \brief Sets if the window should be placed above all non-topmost windows.
 	void set_topmost(bool value = true);
 
+	/// \brief Sets if the window should stay behind other windows, even when focused (GUI only)
+	void set_in_background(bool value = true);
+
 	/// \brief Flags the window to be a tool window to the windowing system.
 	void set_tool_window(bool value = true);
 

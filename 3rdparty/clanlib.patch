Index: Sources/API/Display/Render/pen.h
===================================================================
--- Sources/API/Display/Render/pen.h	(revision 7026)
+++ Sources/API/Display/Render/pen.h	(working copy)
@@ -77,6 +77,8 @@
 	/// \brief Returns the origin of texture point sprites.
 	CL_PointSpriteOrigin get_point_sprite_origin() const;
 
+	bool is_enable_point_sprite() const;
+
 //!Operations
 public:
 	/// \brief The default value is 1.0
Index: Sources/API/GUI/gui_component.h
===================================================================
--- Sources/API/GUI/gui_component.h	(revision 7026)
+++ Sources/API/GUI/gui_component.h	(working copy)
@@ -318,6 +318,8 @@
 	/// \brief Gets the css element for this component
 	CL_CSSLayoutElement get_css_element();
 
+	bool stay_in_background() const;
+
 /// \}
 /// \name Events
 /// \{
@@ -544,6 +546,8 @@
 	/// \brief Loads a layout from file.
 	void load_css_layout(const CL_String &xml_filename, const CL_String &css_filename);
 
+	void set_stay_in_background(bool value);
+
 /// \}
 /// \name Implementation
 /// \{
Index: Sources/Display/Render/pen.cpp
===================================================================
--- Sources/Display/Render/pen.cpp	(revision 7026)
+++ Sources/Display/Render/pen.cpp	(working copy)
@@ -139,5 +139,9 @@
 	impl->point_sprite_origin = origin;
 }
 
+bool CL_Pen::is_enable_point_sprite() const {
+	return impl->point_sprites;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_Pen Implementation:
Index: Sources/GL/opengl_graphic_context_provider.cpp
===================================================================
--- Sources/GL/opengl_graphic_context_provider.cpp	(revision 7026)
+++ Sources/GL/opengl_graphic_context_provider.cpp	(working copy)
@@ -1317,6 +1317,12 @@
 			break;
 		}
 	}
+
+	if (pen.is_enable_point_sprite()) {
+		glEnable(0x8861); // GL_POINT_SPRITE
+	} else {
+		glDisable(0x8861); // GL_POINT_SPRITE
+	}
 }
 
 void CL_OpenGLGraphicContextProvider::set_polygon_rasterizer(const CL_PolygonRasterizer &raster)
Index: Sources/GUI/gui_component.cpp
===================================================================
--- Sources/GUI/gui_component.cpp	(revision 7026)
+++ Sources/GUI/gui_component.cpp	(working copy)
@@ -602,6 +602,11 @@
 	return impl->constant_repaint;
 }
 
+bool CL_GUIComponent::stay_in_background() const
+{
+	return impl->stay_in_background;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_GUIComponent Events:
 
@@ -1377,6 +1382,11 @@
 	impl->css_layout.layout(gc, get_size());
 }
 
+void CL_GUIComponent::set_stay_in_background(bool value)
+{
+	impl->stay_in_background = value;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // CL_GUIComponent Implementation:
 
Index: Sources/GUI/gui_component_impl.cpp
===================================================================
--- Sources/GUI/gui_component_impl.cpp	(revision 7026)
+++ Sources/GUI/gui_component_impl.cpp	(working copy)
@@ -42,6 +42,7 @@
   focus_policy(CL_GUIComponent::focus_refuse), allow_resize(false), clip_children(false), enabled(true),
   visible(true), activated(false), default_handler(false), cancel_handler(false),
   constant_repaint(false), blocks_default_action_when_focused(false), is_selected_in_group(false), double_click_enabled(true)
+  , stay_in_background(false)
 {
 	gui_manager_impl = gui_manager.lock().get();
 
Index: Sources/GUI/gui_component_impl.h
===================================================================
--- Sources/GUI/gui_component_impl.h	(revision 7026)
+++ Sources/GUI/gui_component_impl.h	(working copy)
@@ -115,6 +115,8 @@
 	CL_CSSLayoutElement css_element;
 	bool double_click_enabled;
 
+	bool stay_in_background;
+
 /// \}
 /// \name Operations
 /// \{
Index: Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp
===================================================================
--- Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp	(revision 7026)
+++ Sources/GUI/WindowManager/gui_window_manager_provider_texture.cpp	(working copy)
@@ -245,7 +245,7 @@
 	CL_GUITopLevelWindow *toplevel_window;
 	toplevel_window = get_window_at_point(new_input_event.mouse_pos);
 
-	if (toplevel_window)
+	if (toplevel_window && !toplevel_window->component->stay_in_background())
 		bring_to_front(toplevel_window);
 
 	// Send focus lost events
